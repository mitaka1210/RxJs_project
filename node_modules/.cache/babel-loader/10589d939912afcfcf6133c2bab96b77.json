{"ast":null,"code":"import _objectSpread from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Subject, zip } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Dependency } from '@/core/dependency';\n\nvar AccountsManager = /*#__PURE__*/function (_Dependency) {\n  _inherits(AccountsManager, _Dependency);\n\n  var _super = _createSuper(AccountsManager);\n\n  function AccountsManager() {\n    var _this;\n\n    _classCallCheck(this, AccountsManager);\n\n    _this = _super.call(this, ['AccountsProvider']);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialDataSubject\", new Subject());\n\n    _defineProperty(_assertThisInitialized(_this), \"init\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"accountData\", {\n      roles: ['admin']\n    });\n\n    return _this;\n  }\n\n  _createClass(AccountsManager, [{\n    key: \"getInitialData\",\n    value: function getInitialData() {\n      var _this2 = this;\n\n      if (!this.init) {\n        var accountsDataSubscription = this.AccountsProvider.accountsDataObservable().pipe(map(function (v, i) {\n          return v;\n        }));\n        var accountsDataAdditionalSubscription = this.AccountsProvider.accountsDataAdditionalObservable().pipe(map(function (v, i) {\n          return v;\n        }));\n        zip(accountsDataSubscription, accountsDataAdditionalSubscription).subscribe(function (r) {\n          _this2.accountData = _objectSpread(_objectSpread(_objectSpread({}, _this2.accountData), r[0]), r[1]);\n\n          _this2.initialDataSubject.next(_this2.accountData);\n        });\n        this.init = true;\n      } else {\n        this.initialDataSubject.next(this.accountData);\n      }\n\n      return this.initialDataSubject.asObservable();\n    }\n  }, {\n    key: \"addRoleToAccount\",\n    value: function addRoleToAccount(role) {\n      var _this3 = this;\n\n      this.AccountsProvider.addRoleToAccount(role).subscribe(function (r) {\n        if (r) {\n          _this3.accountData.roles.push(role);\n        }\n      });\n    }\n  }, {\n    key: \"testMethodFromInject\",\n    value: function testMethodFromInject() {\n      console.log('Success!');\n    }\n  }]);\n\n  return AccountsManager;\n}(Dependency);\n\nexport { AccountsManager as default };","map":{"version":3,"sources":["/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/src/accounts-management/accounts-management.service.js"],"names":["Subject","zip","map","Dependency","AccountsManager","roles","init","accountsDataSubscription","AccountsProvider","accountsDataObservable","pipe","v","i","accountsDataAdditionalSubscription","accountsDataAdditionalObservable","subscribe","r","accountData","initialDataSubject","next","asObservable","role","addRoleToAccount","push","console","log"],"mappings":";;;;;;;AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,MAA7B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;IAEqBC,e;;;;;AACjB,6BAAc;AAAA;;AAAA;;AACV,8BAAM,CAAC,kBAAD,CAAN;;AADU,yEAIO,IAAIJ,OAAJ,EAJP;;AAAA,2DAMP,KANO;;AAAA,kEAQA;AACVK,MAAAA,KAAK,EAAE,CAAC,OAAD;AADG,KARA;;AAAA;AAEb;;;;WAUD,0BAAiB;AAAA;;AACb,UAAI,CAAC,KAAKC,IAAV,EAAgB;AACZ,YAAIC,wBAAwB,GAAG,KAAKC,gBAAL,CAAsBC,sBAAtB,GAA+CC,IAA/C,CAAoDR,GAAG,CAAC,UAACS,CAAD,EAAIC,CAAJ,EAAU;AAC7F,iBAAOD,CAAP;AACH,SAFqF,CAAvD,CAA/B;AAIA,YAAIE,kCAAkC,GAAG,KAAKL,gBAAL,CAAsBM,gCAAtB,GAAyDJ,IAAzD,CAA8DR,GAAG,CAAC,UAACS,CAAD,EAAIC,CAAJ,EAAU;AACjH,iBAAOD,CAAP;AACH,SAFyG,CAAjE,CAAzC;AAIAV,QAAAA,GAAG,CAACM,wBAAD,EAA2BM,kCAA3B,CAAH,CAAkEE,SAAlE,CAA4E,UAAAC,CAAC,EAAI;AAC7E,UAAA,MAAI,CAACC,WAAL,iDAAuB,MAAI,CAACA,WAA5B,GAA4CD,CAAC,CAAC,CAAD,CAA7C,GAAqDA,CAAC,CAAC,CAAD,CAAtD;;AACA,UAAA,MAAI,CAACE,kBAAL,CAAwBC,IAAxB,CAA6B,MAAI,CAACF,WAAlC;AACH,SAHD;AAIA,aAAKX,IAAL,GAAY,IAAZ;AACH,OAdD,MAcO;AACH,aAAKY,kBAAL,CAAwBC,IAAxB,CAA6B,KAAKF,WAAlC;AACH;;AACD,aAAO,KAAKC,kBAAL,CAAwBE,YAAxB,EAAP;AACH;;;WAED,0BAAiBC,IAAjB,EAAuB;AAAA;;AACnB,WAAKb,gBAAL,CAAsBc,gBAAtB,CAAuCD,IAAvC,EAA6CN,SAA7C,CAAuD,UAAAC,CAAC,EAAI;AACxD,YAAIA,CAAJ,EAAO;AACH,UAAA,MAAI,CAACC,WAAL,CAAiBZ,KAAjB,CAAuBkB,IAAvB,CAA4BF,IAA5B;AACH;AACJ,OAJD;AAKH;;;WAED,gCAAuB;AACnBG,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;;;;EA5CwCtB,U;;SAAxBC,e","sourcesContent":["import { Subject, zip } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Dependency } from '@/core/dependency';\n\nexport default class AccountsManager extends Dependency {    \n    constructor() {\n        super(['AccountsProvider']);\n    }\n\n    initialDataSubject = new Subject();\n    \n    init = false;\n\n    accountData = {\n        roles: ['admin']\n    };\n\n    getInitialData() {\n        if (!this.init) {\n            var accountsDataSubscription = this.AccountsProvider.accountsDataObservable().pipe(map((v, i) => {\n                return v;\n            }));\n            \n            var accountsDataAdditionalSubscription = this.AccountsProvider.accountsDataAdditionalObservable().pipe(map((v, i) => {\n                return v;\n            }));\n\n            zip(accountsDataSubscription, accountsDataAdditionalSubscription).subscribe(r => {\n                this.accountData = {...this.accountData, ...r[0], ...r[1]};\n                this.initialDataSubject.next(this.accountData);\n            });\n            this.init = true;\n        } else {\n            this.initialDataSubject.next(this.accountData);\n        }\n        return this.initialDataSubject.asObservable();\n    }\n\n    addRoleToAccount(role) {\n        this.AccountsProvider.addRoleToAccount(role).subscribe(r => {\n            if (r) {\n                this.accountData.roles.push(role);\n            }\n        });\n    }\n\n    testMethodFromInject() {\n        console.log('Success!');\n    }\n}"]},"metadata":{},"sourceType":"module"}