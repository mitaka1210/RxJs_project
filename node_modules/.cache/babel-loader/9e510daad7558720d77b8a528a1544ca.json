{"ast":null,"code":"import _classCallCheck from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\nvar DependencyResolver = /*#__PURE__*/function () {\n  function DependencyResolver() {\n    _classCallCheck(this, DependencyResolver);\n\n    _defineProperty(this, \"_container\", {});\n  }\n\n  _createClass(DependencyResolver, [{\n    key: \"resolveDependencies\",\n    value: function resolveDependencies(dependency, injects, chained) {\n      for (var i = 0; i < injects.length; i++) {\n        var inject = injects[i];\n\n        if (!dependency[inject]) {\n          if (!chained) {\n            dependency[inject] = this._container[inject];\n          } else {\n            dependency.prototype[inject] = this._container[inject];\n          }\n        } else {\n          throw Error('Already registered dependency!');\n        }\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register(name, instance) {\n      if (!this._container[name]) {\n        this._container[name] = new instance();\n        return this._container[name];\n      }\n    }\n  }]);\n\n  return DependencyResolver;\n}();\n\nvar dependencyResolver = new DependencyResolver();\nexport default dependencyResolver;","map":{"version":3,"sources":["/Users/dimitar/Documents/projects/test__Project_RxJS_Vladi/Vladi/front/src/core/dependency-resolver.js"],"names":["DependencyResolver","dependency","injects","chained","i","length","inject","_container","prototype","Error","name","instance","dependencyResolver"],"mappings":";;;;;IAAMA,kB;;;;wCACW,E;;;;;WAIb,6BAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkD;AAC9C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAIE,MAAM,GAAGJ,OAAO,CAACE,CAAD,CAApB;;AACA,YAAI,CAACH,UAAU,CAACK,MAAD,CAAf,EAAyB;AACrB,cAAG,CAACH,OAAJ,EAAa;AACTF,YAAAA,UAAU,CAACK,MAAD,CAAV,GAAqB,KAAKC,UAAL,CAAgBD,MAAhB,CAArB;AACH,WAFD,MAEO;AACHL,YAAAA,UAAU,CAACO,SAAX,CAAqBF,MAArB,IAA+B,KAAKC,UAAL,CAAgBD,MAAhB,CAA/B;AACH;AAEJ,SAPD,MAOO;AACH,gBAAMG,KAAK,CAAC,gCAAD,CAAX;AACH;AACJ;AACJ;;;WAED,kBAASC,IAAT,EAAeC,QAAf,EAAyB;AACrB,UAAI,CAAC,KAAKJ,UAAL,CAAgBG,IAAhB,CAAL,EAA4B;AACxB,aAAKH,UAAL,CAAgBG,IAAhB,IAAwB,IAAIC,QAAJ,EAAxB;AACA,eAAO,KAAKJ,UAAL,CAAgBG,IAAhB,CAAP;AACH;AACJ;;;;;;AAEL,IAAME,kBAAkB,GAAG,IAAIZ,kBAAJ,EAA3B;AACA,eAAeY,kBAAf","sourcesContent":["class DependencyResolver {\n    _container = {\n\n    };\n\n    resolveDependencies(dependency, injects, chained) {\n        for (let i = 0; i < injects.length; i++) {\n            let inject = injects[i];\n            if (!dependency[inject]) {\n                if(!chained) {\n                    dependency[inject] = this._container[inject];\n                } else {\n                    dependency.prototype[inject] = this._container[inject];\n                }\n\n            } else {\n                throw Error('Already registered dependency!');\n            }\n        }    \n    }\n\n    register(name, instance) {\n        if (!this._container[name]) {\n            this._container[name] = new instance();\n            return this._container[name];\n        }\n    }\n}\nconst dependencyResolver = new DependencyResolver();\nexport default dependencyResolver;"]},"metadata":{},"sourceType":"module"}